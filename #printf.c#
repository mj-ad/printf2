#include <stdio.h>
#include "main.h"
#include <stdarg.h>

/**
 *unsigned_number_to_string - counts a string
 *@number: ...
 *@base: ...
 *@buffer: ...
 *
 *Return: nothing / void
 */

void unsigned_number_to_string(uint64_t number, int base, char *buffer)
{
int digit, i = 0, cur = 0;
char number_buffer[1024];
if (number == 0)
{
*buffer++ = ('0');
*buffer = 0;
return;
}
for (i = 0; i < 32; i++)
		number_buffer[i] = 0;

	while (number)
	{
		digit = number % base;
		if (digit >= 10)
			number_buffer[cur++] = 'a' + (digit - 10);
		else
			number_buffer[cur++] = '0' + digit;

		number /= base;
	}
	for (i = cur - 1; i != 0; i--)
		*buffer++ = (number_buffer[i]);
	*buffer++ = (number_buffer[0]);
	*buffer = 0;
}

/**
 *number_to_string - ...
 *@number: ...
 *@base: ...
 *@buffer: ...
 *
 *Return: void
 */

void number_to_string(int64_t number, int base, char *buffer)
{
	if (number < 0)
	{
		*buffer++ = '-';
		number = -1 * number;
	}
	unsigned_number_to_string(number, base, buffer);
}


/**
 * _vprintf - prints according to specifier
 *@format: ...
 *@args: ...
 *
 *Return: ...
 */
int _vprintf(const char *format, va_list args)
{
	int state = 0, n, count = 0, i; /* state 0 = normal, 1 = escape */
	unsigned int n1;
	uint64_t hex1;
	char ch, number_buffer[32];
	const char *s;
	void *p;

	while(*format)
	{
		if (state == 0)
		{
			if (*format == '%')
				state = 1;
			else
			{
				_putchar(*format);
				count++;
			}
		}
		else if (state == 1)
		{
			switch (*format)
			{
				case '%':
					ch = (va_arg(args, int));
					_putchar(ch);
					break;
				case 'c':
					ch = (va_arg(args, int));
					_putchar(ch);
					break;
				case 's':
					s = va_arg(args, const char *);
					while (*s)
						_putchar(*s++);
					break;
				case 'd':
					n = va_arg(args, int);
					number_to_string(n, 10, number_buffer);
					for (i = 0; number_buffer[i]; i++)
						_putchar(number_buffer[i]);
					break;
				case 'i':
					n = va_arg(args, int);
					number_to_string(n, 10, number_buffer);
					for (i = 0; number_buffer[i]; i++)
						_putchar(number_buffer[i]);
					break;
				case 'u':
					n1 = va_arg(args, int);
					number_to_string(n1, 10, number_buffer);
					for (i = 0; number_buffer[i]; i++)
						_putchar(number_buffer[i]);
					break;
				case 'o':
					n = va_arg(args, int);
				       	unsigned_number_to_string(n, 8, number_buffer);
					for (i = 0; number_buffer[i]; i++)
						 _putchar(number_buffer[i]);
					 break;
					
				case 'x':
					hex1 = va_arg(args, int);
					unsigned_number_to_string(hex1, 16, number_buffer);
					for (i = 0; number_buffer[i]; i++)
						_putchar(number_buffer[i]);
					break;
				case 'p':
					_putchar('0');
					_putchar('x');

					p = va_arg(args, void *);
					unsigned_number_to_string((uint64_t) p, 16, number_buffer);
					for (i = 0; number_buffer[i]; i++)
						_putchar(number_buffer[i]);
					break;
			}
			state = 0;
		}
		format++;
	}
	return (count);
}

/**
 * _printf - prints according to the printf function in c
 *@format - the string paased
 *
 *Return: zero
 */

int _printf(const char *format, ...)
{
	int count = 0;
	va_list args;
	va_start(args, format);

	_vprintf(format, args);

	va_end(args);

	return (count);
}
